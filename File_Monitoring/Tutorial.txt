PowerShell QuickStart: From Novice to Ninja!

After completing this comprehensive learning resource, you'll gain the ability to create PowerShell scripts independently.

Let's understand the basics of PowerShell and why it's important for our infrastructure, explained simply.

PowerShell empowers SysAdmin to automate a wide range of tasks on Windows systems, integrate with various tools, and improve efficiency and consistency in managing their infrastructure.

First, let's grasp the fundamental basics of PowerShell to kickstart our journey in learning how to create scripts.

Variables :Imagine variables as tiny boxes that hold information you can use throughout your script. They have a name (like a label on the box) and a value (what's inside the box). In this script, we use variables for things like:

$monthYear: Stores the current month and year in a short format (e.g., "May2024").
$filePathBase: Holds the base path for the folder structure (e.g., "\Path\To\File\$monthYear").
$dateSuffix: Contains the full date (e.g., "20240508").
$fileNamePattern: Stores the pattern to match specific files (e.g., "FileTobeMonitor.20240508*").
$fileInfo: Holds the results of searching for files based on the pattern.
$file: Contains the first matching file found.
$result: Stores information about the found file (size and last modified time).
$jsonResult: This is a bigger box that holds all the other results together in a structured format.

Giving Names and Assigning Values:

We create a variable using a name followed by an equal sign (=) and then the value we want to store.

For example, $monthYear = (Get-Date).ToString("MMMyyyy") creates a variable named $monthYear and assigns the formatted date string to it.

So basically Get-date is command in PowerShell which will give a output of current date and time, but our situation here is that we need to go to current path like May2024, June2024 onwards, so we will format the get-date to string by using command $monthYear = (Get-Date).ToString("MMMyyyy"), this will store a value which we can use further for folder path.

Using the Stored Information: Once a variable has a value, we can use its name anywhere in the script to refer to that value. For example, after creating $monthYear, we use it to build the folder path \Path\To\File\$monthYear. The script replaces $monthYear with its actual value (like "May2024") when building the path.

Objects : 

Think of objects as more complex boxes that can hold different pieces of information related to something. In below script explanation, we use an object named $result to store details about the found file

channel: This acts like a label inside the box, identifying the type of information (e.g., "FileToBeMonitor").

Value: Another label inside the box, holding the actual value (e.g., file size in bytes).

Ensure that the file name is written as a string within the Channel object, as it will be displayed in our PRTG Tool.

"Don't worry if the variables above seem confusing. I'll explain each line of the script in detail in the following explanation section.

Basic Requirements : 

To understand and work with PowerShell scripts, your will need to grasp a few basics:

Commands: These are like instructions you give to PowerShell to perform actions. In the script, we see commands like Get-Date, Join-Path, and Get-ChildItem. (So, essentially, PowerShell is a collection of commands that can be customized to create our own automation scripts.)

Parameters: Some commands allow you to provide additional details (parameters) to customize their behavior. For instance, Get-Date has a parameter to format the output in a way we want. E.g.:- Get-Date -Format 'yyyyMMdd' (This will format the Get-Date Command output to 20240508)

Operators: These are symbols used to perform calculations or comparisons. The script might use operators like + for string concatenation or -eq for equality checks.

Output: Commands often produce some output (like text or data) that you can use or display on the screen. The script uses Write-Output to show the final results.

Great job, soldiers! You've taken a few steps closer to learning scripting. Now, let's dive into the complete script explanation for 3DS Cardinal File Monitoring.

let's take a dip into the secret sauce with this gem of a script, shall we? 

Now, let's understand each line of the script step by step. Fasten your seatbelt for an exciting journey into the world of scripting!

Lines 2-3: Creating a Dynamic Folder Path: 

Line 2:

$monthYear = (Get-Date).ToString("MMMyyyy")
Imagine a box named $monthYear. This line puts a label on the box and stores something inside.
Get-Date is like a magic tool that gets the current date and time.
.ToString("MMMyyyy") is a special code that tells Get-Date to write the date in a short format, like "May2024" (May 2024).

Line 3:

$filePathBase = "\Path\To\File\$monthYear"
This line creates another box named $filePathBase and stores a path to a folder location.
The path includes a special instruction $monthYear. This tells the script to use the value stored in the $monthYear box (e.g., "May2024") and insert it there. So, the final path might look like "\Path\To\File\May2024".

Lines 6-7: Building a File Name Pattern:

Line 6: $dateSuffix = (Get-Date -Format 'yyyyMMdd')
Similar to line 1, this line creates a box named $dateSuffix and stores a date code.
It uses Get-Date again, but with a different code (yyyyMMdd). This code writes the full date, including the year, month, and day (e.g., "20240508").

Line 7: $fileNamePattern = "FileToBeMonitor.$dateSuffix*"
This line creates a box named $fileNamePattern and stores a pattern for searching files.
The pattern includes "FileToBeMonitor.", followed by the content of the $dateSuffix box (e.g., "20240508"), and then an asterisk (*). This asterisk acts like a wildcard, allowing the script to find any files that end with additional text after the date. For example, it could find files named "FileToBeMonitor.20240508.txt".

Line 11: Combining Path and Pattern:

Line 11: $filePathPattern = Join-Path -Path $filePathBase -ChildPath $fileNamePattern
Imagine you have two puzzles: $filePathBase (the folder path) and $fileNamePattern (the file name pattern). This line uses a tool called Join-Path to put these puzzles together.
Join-Path takes two pieces of information:
The base path (-Path $filePathBase), which is stored in the box named $filePathBase.
The file name pattern (-ChildPath $fileNamePattern), which is stored in the box named $fileNamePattern.
By combining them, Join-Path creates a complete path with wildcards, representing the location of all files that match the pattern within the folder. For instance, the result might be "\Path\To\File\May2024\FileToBeMonitor.20240508*".

Line 13-18: Result Of our whole Script output

Line 13: $jsonResult: This is like a big box where you'll store all the final information the script gathers. @{ ... }: This is a special way of creating a section within the box. It uses curly braces ({ }) and lets you add key-value pairs to organize information.

Inside the big box ($jsonResult), you create another section: 

prtg: This acts like a smaller box within the big one. It might represent a specific part of the final data structure.

Within the "prtg" box, you set up two key-value pairs:

result = @():

result is like a label inside the "prtg" box.

“@()“ is another way of creating a list. In this case, it's an empty list where the script will eventually add more information about the files it finds.

error = $null:

error is another label inside the "prtg" box.

$null means there's no error information initially. The script will set this to a value (likely 1) if there's an error later.

Overall, this Json Result snippet creates a structured way to store the script's results.

Line 20-25:

Line 21:

This line uses a command called Get-ChildItem to search for files.

It provides the $filePathPattern (the combined path and pattern) as a guide, telling Get-ChildItem to look for files that match that pattern in the specified location.

The -ErrorAction Stop part is like an instruction manual. It tells the script to stop running if there's a problem finding the files.

Line 23:

This line checks if Get-ChildItem found any files. It looks inside the $fileInfo box (which stores the search results) and sees if there's anything there.

$fileInfo stores the results of the search.

.Count is a property that tells us how many items are in that collection (number of files found).

-eq 0 compares the number of items to zero.

Line 24:

This line only executes if $fileInfo.Count is indeed zero (no files found).

The throw keyword is like raising an alarm. It throws an error message with the text "File not found: $filePathPattern".

The $filePathPattern variable is included in the error message to show which specific pattern of files wasn't found.

In Simpler Terms: Imagine the script went to a folder looking for files based on the instructions in the $filePathPattern box. These lines check if the script found any files at all. If there are no files (the folder is empty or the pattern doesn't match any files), the script throws an error message saying "File not found" and tells you which pattern it was looking for. This helps identify situations where the script might not be finding the expected files.

Line 28: $file = $fileInfo[0]

Since the script assumes there's at least one file, this line takes the first file from the search results stored in $fileInfo. Imagine the $fileInfo box containing multiple files, and this line picks the very first one. 

It puts that specific file information into a new box named $file.

In many programming languages, including PowerShell, array indexing starts from 0, not 1. This means that the first element in an array is accessed using index 0, the second element with index 1, and so on.

For example, if we have three files named File1, File2, and File3, and we want to access File1, we would use index 0 because it's the first element in the array.

Line 30-33:

This line creates another box named $result to store information about the chosen file.

It uses a special way of writing information inside the box with curly braces ({ }) and key-value pairs.

Here, it creates two pieces of information:

channel: This acts like a label inside the box, set to "FileToBeMonitor" (likely describing the name of file).

value: Another label inside the box, which holds the actual size of the file stored in $file. The script retrieves the size using .Length.

Line 35: 

This line adds the information from the $result box to a bigger box named $jsonResult.

Imagine $jsonResult as a main container that will hold all the final information.

The prtg and result parts within $jsonResult represents specific structures for the data.

The += operator is like adding another item (the $result information) to a list inside the $jsonResult.prtg.result section.

Line 37-40:

This create another box named $resultLastWriteTime to store the last modified time of the file.

 They use Get-Date again to get the date and time the file was last modified based on the $file.LastWriteTime property.

This format the time to show only hours and minutes and store it in the value section of the $resultLastWriteTime box.

Line 43-49:

This section acts like a safety net. It uses a try...catch block to handle any errors that might occur during the script execution.

If everything goes smoothly in the previous steps, this part won't be used.

The try block represents the main script execution. We've already explained the code within this block.

The catch block activates if there's an error.

It sets an error flag ($jsonResult.prtg.error) to 1 and captures the error message ($_) for reference.

Line 46: converts the entire $jsonResult structure (including the error information) into a JSON format, which is a way to represent data in text format.

The script then writes this JSON output with the error message to the console (Write-Output).

Finally, the script exits with an error code (1) to indicate something went wrong.

Line 52-53: Successful Output 

If there are no errors, these lines simply convert the final $jsonResult structure (without error information) into JSON and write it to the console for successful output.

If you run this Script in PowerShell console then you will get output like this which is a JSON Output for your automation in PRTG.

That's it for now! You've unlocked the basics of this PowerShell script. With a little practice, you'll be automating tasks and conquering IT challenges in no time. Keep scripting!

Stay Script-savvy,
Brayan Vinodi
